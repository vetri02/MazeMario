import "./styles.css";
window.mario = (function() {
  return {
    init: function() {
      // FOR TESTING
      // this.gridWidth = 10;
      // this.gridHeight = 10;
      // this.buildTiles(this.gridWidth, this.gridHeight);
      this.getGridValue();
    },
    getGridValue: function() {
      this.gridWidth = prompt("Please, enter grid width", 0);
      this.gridHeight = prompt("Please, enter grid height", 0);

      if (
        typeof parseInt(this.gridWidth, 10) !== "number" ||
        this.gridWidth === 0
      ) {
        this.gridWidth = prompt("Please, enter a valid grid width", 0);
      }
      if (
        typeof parseInt(this.gridHeight, 10) !== "number" ||
        this.gridHeight === 0
      ) {
        this.gridHeight = prompt("Please, enter a valid grid height", 0);
      }

      this.gridWidth = parseInt(this.gridWidth, 10);
      this.gridHeight = parseInt(this.gridHeight, 10);
      this.buildTiles(this.gridWidth, this.gridHeight);
    },
    buildMatrix: function(m, n) {
      let result = [];
      const marioLocationY = Math.floor(Math.random() * n);
      for (var i = 0; i < n; i++) {
        let fillLocation = Math.floor(Math.random() * m);
        let fillArray = new Array(m).fill(0);
        fillArray.fill(1, fillLocation, fillLocation + 1);

        if (marioLocationY === i) {
          let marioLocationX = Math.floor(Math.random() * m);
          let newX, newXStop;

          if (marioLocationX !== fillLocation) {
            newX = marioLocationX;
            newXStop = marioLocationX + 1;
          } else if (marioLocationX === 9) {
            newX = marioLocationX - 1;
            newXStop = marioLocationX;
          } else {
            newX = marioLocationX + 1;
            newXStop = marioLocationX + 2;
          }
          fillArray.fill(2, newX, newXStop);
          // console.log(`Mario Locatioin : ${newX}, ${marioLocationY}`);
          this.marioPosition = [newX, marioLocationY];
        }
        result.push(fillArray);
      }
      return result;
    },
    buildTiles: function(width, height) {
      this.board = this.buildMatrix(width, height);
      // console.table(this.board);
      this.renderTiles(this.board);
      this.keycodeEvents(width, height);
    },
    renderTiles: function(board) {
      // should add https://github.com/Matt-Esch/virtual-dom for render perf
      const markup = this.board
        .map(row =>
          row
            .map(
              col =>
                `<span class="field ${
                  col === 0 ? "grass" : col === 2 ? "mario" : "mushroom"
                }">
                ${
                  col === 1
                    ? '<svg width="28px" height="28px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M512 256C512 114.844 397.167 0 256 0S0 114.844 0 256c0 69.727 30.309 121.482 89.641 154.245C101.427 492.888 137.385 512 256 512c115.302 0 152.566-17.882 165.385-94.788C481.357 386.198 512 332.13 512 256z" fill="#303c42"/><path d="M488.715 285.333C463.018 261.271 448 227.522 448 192c0-18.168 3.918-36.04 11.402-52.533 19.776 34.38 31.264 74.103 31.264 116.533.001 10.32-.771 19.995-1.951 29.333z" fill="#f2f2f2"/><g fill="#f2f2f2"><circle cx="256" cy="149.333" r="106.667"/><path d="M52.598 139.467C60.082 155.96 64 173.832 64 192c0 35.251-14.844 68.836-40.258 92.868-1.428-9.247-2.409-18.764-2.409-28.868 0-42.43 11.489-82.152 31.265-116.533z"/></g><path d="M256 490.667c-124.896 0-140.979-20.281-147.854-106.24 30.708-33.25 86.833-53.76 147.854-53.76s117.146 20.51 147.854 53.76c-6.875 85.958-22.958 106.24-147.854 106.24z" fill="#fee4d0"/><path d="M424.6 390.984c.292-3.152.632-6.142.879-9.453a10.743 10.743 0 0 0-2.521-7.719C389.02 334.041 325.041 309.333 256 309.333s-133.021 24.708-166.958 64.479a10.743 10.743 0 0 0-2.521 7.719c.057.76.143 1.418.202 2.169-28.641-19.128-47.729-44.467-57.525-75.514C64.376 279.922 85.333 237.188 85.333 192c0-25.608-6.943-50.56-19.53-72.911 40.25-55.755 104.251-93.048 177.122-97.092C178.461 28.566 128 83.163 128 149.333c0 70.583 57.417 128 128 128s128-57.417 128-128c0-66.171-50.461-120.767-114.926-127.337 72.871 4.044 136.872 41.337 177.122 97.092-12.587 22.352-19.53 47.303-19.53 72.911 0 45.802 21.447 88.967 57.414 117.219-9.359 35.352-29.006 62.456-59.48 81.766z" fill="#0B812C"/><path d="M488.715 285.333C463.018 261.271 448 227.522 448 192c0-18.168 3.918-36.04 11.402-52.533 19.776 34.38 31.264 74.103 31.264 116.533.001 10.32-.771 19.995-1.951 29.333z" fill="#f2f2f2"/><path d="M424.6 390.984c.292-3.152.632-6.142.879-9.453a10.743 10.743 0 0 0-2.521-7.719C389.02 334.041 325.041 309.333 256 309.333s-133.021 24.708-166.958 64.479a10.743 10.743 0 0 0-2.521 7.719c.057.76.143 1.418.202 2.169-28.641-19.128-47.729-44.467-57.525-75.514C64.376 279.922 85.333 237.188 85.333 192c0-25.608-6.943-50.56-19.53-72.911 40.25-55.755 104.251-93.048 177.122-97.092C178.461 28.566 128 83.163 128 149.333c0 70.583 57.417 128 128 128s128-57.417 128-128c0-66.171-50.461-120.767-114.926-127.337 72.871 4.044 136.872 41.337 177.122 97.092-12.587 22.352-19.53 47.303-19.53 72.911 0 45.802 21.447 88.967 57.414 117.219-9.359 35.352-29.006 62.456-59.48 81.766z" fill="#0B812C"/><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="-38.17" y1="631.934" x2="-29.916" y2="623.68" gradientTransform="matrix(21.3333 0 0 -21.3333 996.333 13791.667)"><stop offset="0" stop-opacity=".1"/><stop offset="1" stop-opacity="0"/></linearGradient><path d="M256 490.667c124.896 0 140.979-20.281 147.854-106.24-30.708-33.25-86.833-53.76-147.854-53.76s-117.146 20.51-147.854 53.76l105.138 105.138c12.616.758 26.752 1.102 42.716 1.102z" fill="url(#a)"/><g fill="#303c42"><path d="M197.333 362.667c-8.313 0-16 5.167-16 42.667s7.688 42.667 16 42.667 16-5.167 16-42.667-7.687-42.667-16-42.667zM314.667 448c8.313 0 16-5.167 16-42.667s-7.688-42.667-16-42.667-16 5.167-16 42.667 7.687 42.667 16 42.667z"/></g><linearGradient id="b" gradientUnits="userSpaceOnUse" x1="-45.683" y1="639.332" x2="-24.059" y2="629.249" gradientTransform="matrix(21.3333 0 0 -21.3333 996.333 13791.667)"><stop offset="0" stop-color="#fff" stop-opacity=".2"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><path d="M512 256C512 114.844 397.167 0 256 0S0 114.844 0 256c0 69.727 30.309 121.482 89.641 154.245C101.427 492.888 137.385 512 256 512c115.302 0 152.566-17.882 165.385-94.788C481.357 386.198 512 332.13 512 256z" fill="url(#b)"/><path d="M23.742 284.868c3.85-3.642 7.37-7.566 10.72-11.618-4.297-1.536-8.4-3.263-12.57-4.923.422 5.63 1.018 11.156 1.85 16.541zM449.07 207.586c3.703 29.678 17.746 57.241 39.645 77.747 1.18-9.339 1.952-19.013 1.952-29.333 0-28.292-5.501-55.197-14.768-80.301-7.464 11.19-16.491 21.837-26.829 31.887zM55.904 280.103c-7.65 10.348-16.496 19.88-26.706 28.083 9.796 31.047 28.884 56.387 57.525 75.514-.059-.751-.145-1.409-.202-2.169a10.743 10.743 0 0 1 2.521-7.719c33.938-39.771 97.917-64.479 166.958-64.479s133.021 24.708 166.958 64.479a10.743 10.743 0 0 1 2.521 7.719c-.247 3.311-.587 6.301-.879 9.453 30.474-19.31 50.121-46.414 59.48-81.766-27.411-21.531-46.306-51.745-53.784-85.165-57.753 45.495-145.493 74.613-243.63 74.613-46.687.001-90.877-6.761-130.762-18.563z" opacity=".1"/></svg>'
                    : ""
                }
                ${
                  col === 2
                    ? '<svg width="32px" height="32px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M512 213.333c0-16.656-14.479-50.708-68.708-62.969-2.896-3.646-5.875-7.479-8.979-11.448C391.125 83.604 325.854 0 213.333 0 92.211 0 65.279 65.26 64.115 163.836 28.352 175.513 0 194.802 0 224c0 37.135 37.807 50.195 64.488 52.796 2.121 32.044 14.188 50.189 31.368 68.493-6.599 9.488-10.523 20.967-10.523 33.378 0 18.359 8.646 34.57 21.887 45.335C112.93 488.661 187.013 512 256 512c47.167 0 132.958-34.969 167.625-128.188 66.563-3.385 88.375-50.99 88.375-74.479 0-17.34-5.633-34.605-16.26-46.897C511.957 245.37 512 221.818 512 213.333z" fill="#303c42"/><path d="M213.333 21.333c102.104 0 161.104 75.552 204.167 130.719 4 5.125 7.833 10.021 11.5 14.615a10.62 10.62 0 0 0 6.25 3.792c45.229 9.052 55.417 34.625 55.417 42.875 0 7.829-.164 25.327-12.431 36.185-5.842-2.513-12.254-4.185-19.569-4.185-8.801 0-16.534 2.159-23.346 5.868-95.46-81.266-170.975-97.97-230.148-101.145 12.473-12.341 19.194-28.311 18.786-45.214-.417-17.281-8.146-33.292-21.771-45.083-13.354-11.542-30.292-17.604-49.104-17.208-14.422.353-28.013 4.871-39.405 12.669 19.113-22.007 50.067-33.888 99.654-33.888z" fill="#e53935"/><path d="M183.009 48.215c6.229-.461 12.717-.75 19.658-.75 102.104 0 161.104 75.552 204.167 130.719 4 5.125 7.833 10.021 11.5 14.615a10.62 10.62 0 0 0 6.25 3.792C469.813 205.642 480 231.215 480 239.465c0 2.118-.073 5.004-.333 8.216 10.522-10.908 11-26.911 11-34.348 0-8.25-10.188-33.823-55.417-42.875a10.612 10.612 0 0 1-6.25-3.792c-3.667-4.594-7.5-9.49-11.5-14.615C374.438 96.885 315.438 21.333 213.333 21.333c-49.587 0-80.542 11.88-99.655 33.888 11.392-7.798 24.983-12.316 39.405-12.669 10.727-.225 20.735 1.87 29.926 5.663z" opacity=".2" fill="#fff"/><g fill="#6d4c41"><path d="M395.257 248.439c7.611 5.316 15.598 11.234 23.874 17.602-6.762 9.785-11.307 22.65-13.005 38.522l-28.771-11.51c4.865-10.194 12.086-26.696 17.902-44.614z"/><path d="M411.143 282.182c2.145-6.036 4.772-11.491 7.987-16.142-8.276-6.367-16.263-12.285-23.874-17.602-2.517 7.757-5.294 15.124-8.034 21.953 7.107 3.606 16.114 7.721 23.921 11.791z"/></g><g fill="#fff"><path d="M155.688 149.188c-12.333.208-25.271-3.938-34.583-12-1.676-1.448-3.07-3.073-4.47-4.691l20.22-26.954 8.271 16.563c3.625 7.229 15.458 7.229 19.083 0l8.271-16.563 20.027 26.697c-.941 1.091-1.753 2.253-2.819 3.272-8.917 8.498-20.98 13.363-34 13.676z"/><path d="M202.263 109.677l-23.055-30.74c-2.229-2.958-5.813-4.667-9.5-4.229a10.659 10.659 0 0 0-8.583 5.854l-6.458 12.917-6.458-12.917a10.662 10.662 0 0 0-8.583-5.854c-3.667-.438-7.271 1.271-9.5 4.229l-23.158 30.876c-.056-.71-.263-1.389-.28-2.105-.271-11.208 4.312-21.906 12.937-30.145 8.917-8.5 20.979-13.365 34-13.677.438-.01.896-.021 1.354-.021 12.479 0 24.25 4.24 33.229 12.021 9.042 7.813 14.146 18.281 14.417 29.479.035 1.458-.234 2.875-.362 4.312z"/></g><path d="M87.829 123.18c3.262 11.422 9.727 21.852 19.296 30.133.122.105.27.176.392.28a316.454 316.454 0 0 0-21.99 4.29c.282-12.306.981-23.921 2.302-34.703z" fill="#303c42"/><path d="M21.333 224c0-31.427 73.083-53.333 138.667-53.333h3.479c11.493-.04 23.734-.055 36.749.551-59.24 4.77-124.77 40.688-134.788 84.122-15.267-1.731-44.107-8.069-44.107-31.34z" fill="#0B812C"/><path d="M45.105 234.682c0-25.422 47.827-44.6 100.816-51.008 17.518-6.603 36.199-10.999 54.306-12.457-13.014-.605-25.255-.591-36.749-.551H160c-65.583 0-138.667 21.906-138.667 53.333 0 18.26 17.708 26.029 32.73 29.392-5.286-4.53-8.958-10.526-8.958-18.709z" opacity=".1"/><path d="M106.667 320c0 2.477.635 4.772 1.414 6.986-4.714-5.271-8.659-10.371-11.875-15.641.911-20.508 9.833-34.012 15.794-34.012 4.737 0 11.255 8.243 14.298 21.677-10.933.913-19.631 9.832-19.631 20.99z" fill="#fff"/><path d="M124.816 293.642c-1.798-.987-3.909-1.961-5.515-1.961-6.669 0-15.984 9.961-19.751 24.725 2.607 3.737 5.145 6.793 8.531 10.579-.779-2.214-1.414-4.509-1.414-6.986 0-11.158 8.698-20.077 19.632-20.99-.49-2.159-.836-3.488-1.483-5.367z" fill="#29b6f6"/><path d="M416 362.667a10.688 10.688 0 0 0-10.125 7.292C376.563 457.896 298.396 490.667 256 490.667c-26.651 0-107.706-4.423-124.647-54.788 4.083.902 8.296 1.454 12.647 1.454 8.225 0 16.042-1.732 23.152-4.799C180.947 440.159 198.521 448 213.333 448c22.729 0 36.667-10.604 41.125-23.104 16.833-4.104 47.396-14.094 53.708-33.542 11.083-5.948 33.167-22.583 33.167-60.688 0-3.927-2.167-7.531-5.625-9.396a10.708 10.708 0 0 0-10.938.5c-.563.375-57.729 37.604-133.75 40.594l.004.096c-.221.017-.427-.076-.65-.044-5.854.719-10.021 6.042-9.292 11.885.167 1.438.25 2.885.25 4.365C181.333 399.25 164.583 416 144 416s-37.333-16.75-37.333-37.333 16.75-37.333 37.333-37.333a10.66 10.66 0 0 0 10.667-10.667c0-4.035-2.323-7.419-5.624-9.23.035-.5.29-5.612.29-6.77C149.333 281.219 133.292 256 112 256c-10.503 0-19.759 6.228-26.423 16.582-.081-1.97-.243-3.799-.243-5.915 0-7.371 3.186-14.947 8.549-22.332 10.824-1.629 30.72 2.018 37.242 8.54 2.083 2.083 4.813 3.125 7.542 3.125s5.458-1.042 7.542-3.125c4.167-4.167 4.167-10.917 0-15.083-7.236-7.236-19.195-11.691-31.16-13.757C140.444 205.699 178.276 192 213.333 192c18.664 0 36.177.051 54.22 2.156-25.234-2.507-38.049 7.978-48.012 19-1.063 1.167-2.063 2.292-3.083 3.302-4.167 4.167-4.167 10.917 0 15.083a10.634 10.634 0 0 0 7.542 3.125c2.729 0 5.458-1.042 7.542-3.125 1.25-1.25 2.5-2.635 3.813-4.083 8.729-9.625 18.583-20.542 59.354-4.219 5.438 2.188 11.667-.479 13.854-5.948s-.458-11.677-5.938-13.865c-11.564-4.62-21.302-7.233-29.867-8.607 30.135 4.194 62.225 14.737 104.023 41.247-8.805 29.431-23.378 57.302-23.531 57.609a10.67 10.67 0 0 0-.604 8.667 10.698 10.698 0 0 0 6.063 6.229l53.333 21.333c3.271 1.333 7.021.906 9.938-1.073a10.656 10.656 0 0 0 4.688-8.833c0-16.031 3.125-53.333 32-53.333 25.313 0 32 27.906 32 42.667-.001 17.408-18.251 53.335-74.668 53.335z" fill="#fee4d0"/><path d="M458.667 266.667c-3.355 0-6.289.604-8.984 1.52 6.635 9.366 8.984 22.023 8.984 30.48 0 17.406-18.25 53.333-74.667 53.333a10.688 10.688 0 0 0-10.125 7.292C344.563 447.229 266.396 480 224 480c-11.427 0-32.862-.844-54.949-5.742 30.561 14.526 69.884 16.409 86.949 16.409 42.396 0 120.563-32.771 149.875-120.708A10.688 10.688 0 0 1 416 362.667c56.417 0 74.667-35.927 74.667-53.333 0-14.761-6.688-42.667-32-42.667z" opacity=".1"/><path d="M154.486 414.315c-20.5-.102-37.152-16.793-37.152-37.315 0-17.102 11.629-31.402 27.346-35.803-.237.016-.439.137-.68.137-20.583 0-37.333 16.75-37.333 37.333S123.417 416 144 416c3.665 0 7.137-.695 10.486-1.685z" opacity=".2" fill="#fff"/><path d="M202.24 382.892c50.336-3.882 91.441-20.52 114.385-32.079-6.604 17.583-20.646 22.823-21.333 23.073A10.654 10.654 0 0 0 288 384c0 6.323-22.167 16.99-44.771 21.542A10.665 10.665 0 0 0 234.666 416c0 5.167-7.479 10.667-21.333 10.667-6.47 0-15.85-2.93-26.633-8.029 8.909-9.513 14.536-21.964 15.54-35.746z" fill="#6d4c41"/><path d="M256 224c-23.521 0-42.667 23.927-42.667 53.333s19.146 53.333 42.667 53.333c17.219 0 32.008-12.885 38.742-31.293.025-.065.089-.109.112-.176.022-.063.026-.13.048-.193a62.713 62.713 0 0 0 2.987-12.057c.018-.124.073-.241.09-.365.018-.135-.043-.268-.029-.404.391-2.893.716-5.818.716-8.846C298.667 247.927 279.521 224 256 224z" fill="#303c42"/><path d="M234.667 277.333c0-17.344 9.771-32 21.333-32 9.135 0 17.069 9.201 20.033 21.596C264.9 267.641 256 276.701 256 288c0 7.415 4.031 13.642 9.792 17.466-2.964 2.382-6.27 3.867-9.792 3.867-11.562 0-21.333-14.656-21.333-32z" fill="#fff"/><path d="M276.033 266.93c-.883-3.693-1.991-6.897-3.656-9.863-1.349-.423-2.987-1.067-4.409-1.067-11.563 0-21.333 14.656-21.333 32 0 7.85 2.072 15.063 5.335 20.702 1.311.395 2.656.632 4.031.632 3.522 0 6.828-1.486 9.792-3.867C260.031 301.642 256 295.415 256 288c0-11.299 8.9-20.359 20.033-21.07z" fill="#29b6f6"/><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="-45.52" y1="638.967" x2="-23.89" y2="628.882" gradientTransform="matrix(21.3333 0 0 -21.3333 996.333 13791.667)"><stop offset="0" stop-color="#fff" stop-opacity=".2"/><stop offset="1" stop-color="#fff" stop-opacity="0"/></linearGradient><path d="M512 213.333c0-16.656-14.479-50.708-68.708-62.969-2.896-3.646-5.875-7.479-8.979-11.448C391.125 83.604 325.854 0 213.333 0 92.211 0 65.279 65.26 64.115 163.836 28.352 175.513 0 194.802 0 224c0 37.135 37.807 50.195 64.488 52.796 2.121 32.044 14.188 50.189 31.368 68.493-6.599 9.488-10.523 20.967-10.523 33.378 0 18.359 8.646 34.57 21.887 45.335C112.93 488.661 187.013 512 256 512c47.167 0 132.958-34.969 167.625-128.188 66.563-3.385 88.375-50.99 88.375-74.479 0-17.34-5.633-34.605-16.26-46.897C511.957 245.37 512 221.818 512 213.333z" fill="url(#a)"/></svg>'
                    : ""
                }
                </span>`
            )
            .join("")
        )
        .join("<span class='clear'></span>");

      document.getElementById("app").innerHTML = markup;
    },
    keycodeEvents: function(width, height) {
      const self = this;

      let boardWidth = width;
      let boardHeight = height;

      this.marioHasMushroooms = 0;
      this.counter = 0;

      function debounce(cb, interval, immediate) {
        var timeout;

        return function() {
          var context = this,
            args = arguments;
          var later = function() {
            timeout = null;
            if (!immediate) cb.apply(context, args);
          };

          var callNow = immediate && !timeout;

          clearTimeout(timeout);
          timeout = setTimeout(later, interval);

          if (callNow) cb.apply(context, args);
        };
      }

      document.addEventListener(
        "keydown",
        debounce(function(event) {
          event.preventDefault();
          let marioPosition = [...self.marioPosition];
          if (event.keyCode === 37 || 38 || 39 || 40) {
            self.counter = self.counter + 1;
            switch (event.keyCode) {
              case 37:
                marioPosition[0] =
                  marioPosition[0] > 0
                    ? marioPosition[0] - 1
                    : marioPosition[0];
                self.reRenderBoard(marioPosition);
                break;

              case 38:
                marioPosition[1] =
                  marioPosition[1] > 0
                    ? marioPosition[1] - 1
                    : marioPosition[1];
                self.reRenderBoard(marioPosition);
                break;

              case 39:
                marioPosition[0] =
                  marioPosition[0] < boardWidth - 1
                    ? marioPosition[0] + 1
                    : marioPosition[0];
                self.reRenderBoard(marioPosition);
                break;

              case 40:
                marioPosition[1] =
                  marioPosition[1] < boardHeight - 1
                    ? marioPosition[1] + 1
                    : marioPosition[1];
                self.reRenderBoard(marioPosition);
                break;
              default:
                break;
            }
          }
        }, 50)
      );
    },
    reRenderBoard: function(marioPositionNew) {
      if (this.board[marioPositionNew[1]][marioPositionNew[0]] === 1) {
        this.marioHasMushroooms = this.marioHasMushroooms + 1;
      }

      this.board[this.marioPosition[1]][this.marioPosition[0]] = 0;
      this.board[marioPositionNew[1]][marioPositionNew[0]] = 2;
      // console.table(this.board);
      this.marioPosition = marioPositionNew;

      this.renderTiles(this.board);

      setTimeout(() => {
        if (this.marioHasMushroooms === this.gridHeight) {
          alert(`Game Over: Total number of moves ${this.counter}`);
          window.location.reload();
        }
      }, 1);
    }
  };
})();

window.mario.init();
